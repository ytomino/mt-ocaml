external random_seed: unit -> int array = "caml_sys_random_seed";;

external get_id_string: unit -> string =
	"mlmt_dsfmt_${DSFMT_MEXP}_get_id_string";;

let dsfmt_n = (${DSFMT_MEXP} - 128) / 104 + 1;;

let min_float_array_length = dsfmt_n * 2;;

type t;;

external make_int32: int32 -> t = "mlmt_dsfmt_${DSFMT_MEXP}_make_int32";;
external make_int32_array: int32 array -> t =
	"mlmt_dsfmt_${DSFMT_MEXP}_make_int32_array";;

let make (seed: int array) = make_int32_array (Array.map Int32.of_int seed);;
let make_self_init () = make (random_seed ());;

external copy: t -> t = "mlmt_dsfmt_${DSFMT_MEXP}_copy";;

external bits52: t -> int64 = "mlmt_dsfmt_${DSFMT_MEXP}_bits52";;
external float_bits52: t -> float = "mlmt_dsfmt_${DSFMT_MEXP}_float_bits52";;

external unsafe_fill_floatarray52: t -> floatarray -> int -> int -> unit =
	"mlmt_dsfmt_${DSFMT_MEXP}_unsafe_fill_floatarray52";;

let fill_floatarray52 state data pos len =
	if pos >= 0 && len >= min_float_array_length && len mod 2 = 0
		&& len <= Array.Floatarray.length data - pos
	then unsafe_fill_floatarray52 state data pos len
	else invalid_arg "Dsfmt_${DSFMT_MEXP}.fill_floatarray52";; (* __FUNCTION__ *)

let int: t -> int -> int =
	(Uniform_distribution.int_from_int64_bits [@ocaml.inlined]) ~width:52
		~bits:bits52;;
let int32: t -> int32 -> int32 =
	(Uniform_distribution.int32_from_int64_bits [@ocaml.inlined]) ~width:52
		~bits:bits52;;
let int64: t -> int64 -> int64 =
	(Uniform_distribution.int64_from_int64_bits [@ocaml.inlined]) ~width:52
		~bits:bits52;;
