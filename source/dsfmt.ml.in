external random_seed: unit -> int array = "caml_sys_random_seed";;

external get_id_string: unit -> string =
	"mlmt_dsfmt_${DSFMT_MEXP}_get_id_string";;

let dsfmt_n = (${DSFMT_MEXP} - 128) / 104 + 1;;

let min_float_array_length = dsfmt_n * 2;;

type t;;

external make_int32: int32 -> t = "mlmt_dsfmt_${DSFMT_MEXP}_make_int32";;
external make_int32_array: int32 array -> t =
	"mlmt_dsfmt_${DSFMT_MEXP}_make_int32_array";;

let make (seed: int array) = make_int32_array (Array.map Int32.of_int seed);;
let make_self_init () = make (random_seed ());;

external copy: t -> t = "mlmt_dsfmt_${DSFMT_MEXP}_copy";;

external bits52: t -> (int64 [@ocaml.unboxed]) =
	"mlmt_dsfmt_${DSFMT_MEXP}_bits52" "mlmt_dsfmt_${DSFMT_MEXP}_bits52_unboxed"
	[@@ocaml.noalloc];;
external float_bits52: t -> (float [@ocaml.unboxed]) =
	"mlmt_dsfmt_${DSFMT_MEXP}_float_bits52"
	"mlmt_dsfmt_${DSFMT_MEXP}_float_bits52_unboxed"
	[@@ocaml.noalloc];;
external float_bits52p1: t -> (float [@ocaml.unboxed]) =
	"mlmt_dsfmt_${DSFMT_MEXP}_float_bits52p1"
	"mlmt_dsfmt_${DSFMT_MEXP}_float_bits52p1_unboxed"
	[@@ocaml.noalloc];;

external unsafe_fill_floatarray52: t -> floatarray -> int -> int -> unit =
	"mlmt_dsfmt_${DSFMT_MEXP}_unsafe_fill_floatarray52";;

let fill_floatarray52 state data pos len =
	if pos >= 0 && len >= min_float_array_length && len mod 2 = 0
		&& len <= Array.Floatarray.length data - pos
	then unsafe_fill_floatarray52 state data pos len
	else invalid_arg "Dsfmt_${DSFMT_MEXP}.fill_floatarray52";; (* __FUNCTION__ *)

external unsafe_fill_floatarray52p1: t -> floatarray -> int -> int -> unit =
	"mlmt_dsfmt_${DSFMT_MEXP}_unsafe_fill_floatarray52p1";;

let fill_floatarray52p1 state data pos len =
	if pos >= 0 && len >= min_float_array_length && len mod 2 = 0
		&& len <= Array.Floatarray.length data - pos
	then unsafe_fill_floatarray52p1 state data pos len
	else invalid_arg "Dsfmt_${DSFMT_MEXP}.fill_floatarray52p1";; (* __FUNCTION__ *)

let int: t -> int -> int =
	(Uniform_distribution.int_from_int64_bits [@ocaml.inlined]) ~width:52
		~bits:bits52;;
let int32: t -> int32 -> int32 =
	(Uniform_distribution.int32_from_int64_bits [@ocaml.inlined]) ~width:52
		~bits:bits52;;
let int64: t -> int64 -> int64 =
	(Uniform_distribution.int64_from_int64_bits [@ocaml.inlined]) ~width:52
		~bits:bits52;;

let nativeint: t -> nativeint -> nativeint =
	if Sys.word_size <= 32 then (
		fun state bound -> Nativeint.of_int32 (int32 state (Nativeint.to_int32 bound))
	) else (
		fun state bound -> Int64.to_nativeint (int64 state (Int64.of_nativeint bound))
	);;

let float (state: t) (bound: float) =
	if bound > 0. then bound *. float_bits52 state
	else invalid_arg "Dsfmt_${DSFMT_MEXP}.float";; (* __FUNCTION__ *)

let bool (state: t) = Int64.logand (bits52 state) 0x0008000000000000L <> 0L;;

external unsafe_import: int32 array * int -> t =
	"mlmt_dsfmt_${DSFMT_MEXP}_unsafe_import";;

let import (source: int32 array * int) =
	let status_array, idx = source in
	let dsfmt_n32 = dsfmt_n * 4 in
	if Array.length status_array = dsfmt_n32 + 4 && idx >= 0 && idx <= dsfmt_n32
	then unsafe_import source
	else invalid_arg "Dsfmt_${DSFMT_MEXP}.import";; (* __FUNCTION__ *)

external export: t -> int32 array * int = "mlmt_dsfmt_${DSFMT_MEXP}_export";;
