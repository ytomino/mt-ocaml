external random_seed: unit -> int array = "caml_sys_random_seed";;

external get_id_string: unit -> string =
	"mlmt_sfmt_${SFMT_MEXP}_get_id_string";;

let sfmt_n = ${SFMT_MEXP} / 128 + 1;;

let min_int32_array_length = sfmt_n * 4;;
let min_int64_array_length = sfmt_n * 2;;

type t;;

external make_int32: int32 -> t = "mlmt_sfmt_${SFMT_MEXP}_make_int32";;
external make_int32_array: int32 array -> t =
	"mlmt_sfmt_${SFMT_MEXP}_make_int32_array";;

let make (seed: int array) = make_int32_array (Array.map Int32.of_int seed);;
let make_self_init () = make (random_seed ());;

external copy: t -> t = "mlmt_sfmt_${SFMT_MEXP}_copy";;

external bits32: t -> (int32 [@ocaml.unboxed]) =
	"mlmt_sfmt_${SFMT_MEXP}_bits32" "mlmt_sfmt_${SFMT_MEXP}_bits32_unboxed"
	[@@ocaml.noalloc];;
external bits64: t -> (int64 [@ocaml.unboxed]) =
	"mlmt_sfmt_${SFMT_MEXP}_bits64" "mlmt_sfmt_${SFMT_MEXP}_bits64_unboxed"
	[@@ocaml.noalloc];;
external float_bits32: t -> (float [@ocaml.unboxed]) =
	"mlmt_sfmt_${SFMT_MEXP}_float_bits32"
	"mlmt_sfmt_${SFMT_MEXP}_float_bits32_unboxed"
	[@@ocaml.noalloc];;
external float_bits53: t -> (float [@ocaml.unboxed]) =
	"mlmt_sfmt_${SFMT_MEXP}_float_bits53"
	"mlmt_sfmt_${SFMT_MEXP}_float_bits53_unboxed"
	[@@ocaml.noalloc];;

external unsafe_fill_int32_bigarray: t ->
	(int32, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t -> int ->
	int -> unit =
	"mlmt_sfmt_${SFMT_MEXP}_unsafe_fill_int32_bigarray";;

let fill_int32_bigarray state data pos len =
	if pos >= 0 && len >= min_int32_array_length && len mod 4 = 0
		&& len <= Bigarray.Array1.dim data - pos
	then unsafe_fill_int32_bigarray state data pos len
	else invalid_arg "Sfmt_${SFMT_MEXP}.fill_int32_bigarray";; (* __FUNCTION__ *)

external unsafe_fill_int64_bigarray: t ->
	(int64, Bigarray.int64_elt, Bigarray.c_layout) Bigarray.Array1.t -> int ->
	int -> unit =
	"mlmt_sfmt_${SFMT_MEXP}_unsafe_fill_int64_bigarray";;

let fill_int64_bigarray state data pos len =
	if pos >= 0 && len >= min_int64_array_length && len mod 2 = 0
		&& len <= Bigarray.Array1.dim data - pos
	then unsafe_fill_int64_bigarray state data pos len
	else invalid_arg "Sfmt_${SFMT_MEXP}.fill_int64_bigarray";; (* __FUNCTION__ *)

let int: t -> int -> int = Uniform_distribution.int ~bits32 ~bits64;;
let int32: t -> int32 -> int32 = Uniform_distribution.int32 ~bits32;;
let int64: t -> int64 -> int64 = Uniform_distribution.int64 ~bits32 ~bits64;;

let nativeint: t -> nativeint -> nativeint =
	if Sys.word_size <= 32 then (
		fun state bound -> Nativeint.of_int32 (int32 state (Nativeint.to_int32 bound))
	) else (
		fun state bound -> Int64.to_nativeint (int64 state (Int64.of_nativeint bound))
	);;

let float (state: t) (bound: float) =
	if bound > 0. then bound *. float_bits53 state
	else invalid_arg "Sfmt_${SFMT_MEXP}.float";; (* __FUNCTION__ *)

let bool (state: t) = Int32.logand (bits32 state) 0x80000000l <> 0l;;

external unsafe_import: int32 array * int -> t =
	"mlmt_sfmt_${SFMT_MEXP}_unsafe_import";;

let import (source: int32 array * int) =
	let state_array, idx = source in
	let sfmt_n32 = min_int32_array_length in
	if Array.length state_array = sfmt_n32 && idx >= 0 && idx <= sfmt_n32
	then unsafe_import source
	else invalid_arg "Sfmt_${SFMT_MEXP}.import";; (* __FUNCTION__ *)

external export: t -> int32 array * int = "mlmt_sfmt_${SFMT_MEXP}_export";;
